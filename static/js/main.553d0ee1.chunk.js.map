{"version":3,"sources":["containers/Grid/styles.module.scss","containers/Picker/styles.module.scss","containers/App/styles.module.scss","containers/Cursor/styles.module.scss","containers/Grid/index.tsx","contstants/colors.ts","containers/Picker/index.tsx","containers/Cursor/index.tsx","containers/App/index.tsx","index.tsx"],"names":["module","exports","Grid","width","height","cells","dragging","currentColor","onCellFill","onColorDrop","useCallback","index","className","styles","grid","style","gridTemplateColumns","gridTemplateRows","map","el","i","cell","onMouseUp","backgroundColor","key","COLORS","Picker","onDragStart","picker","color","onMouseDown","Cursor","cursor","useRef","onDrag","event","pageX","pageY","current","transform","useEffect","window","addEventListener","removeEventListener","display","ref","INITIAL_CELLS","Array","WIDTH","fill","ReactDOM","render","useState","setCells","setDragging","setCurrentColor","onDragStop","app","document","getElementById"],"mappings":"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","file":"static/js/main.553d0ee1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"styles_grid__3Xaiu\",\"cell\":\"styles_cell__z8N1q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"picker\":\"styles_picker__dV2n_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"styles_app__u1BgC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cursor\":\"styles_cursor__1nk-k\"};","import React, { FC, useMemo, useCallback, useEffect } from \"react\";\nimport styles from \"./styles.module.scss\";\n\ninterface IProps {\n  width: number;\n  height: number;\n  cells: string[];\n  dragging: boolean;\n  currentColor: string;\n\n  onCellFill: (index: number, color: string) => void;\n}\n\nconst Grid: FC<IProps> = ({\n  width,\n  height,\n  cells,\n  dragging,\n  currentColor,\n  onCellFill\n}) => {\n  const onColorDrop = useCallback(\n    index => () => {\n      if (!dragging) {\n        return;\n      }\n\n      onCellFill(index, currentColor);\n    },\n    [dragging, currentColor, onCellFill]\n  );\n  \n  return (\n    <div\n      className={styles.grid}\n      style={{\n        gridTemplateColumns: `repeat(${width}, 40px)`,\n        gridTemplateRows: `repeat(${height}, 40px)`\n      }}\n    >\n      {cells.map((el, i) => (\n        <div\n          className={styles.cell}\n          onMouseUp={onColorDrop(i)}\n          style={{ backgroundColor: el }}\n          key={i}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport { Grid };\n","export const COLORS = ['#ff3344', '#33ff44', '#3344ff'];\n","import React, { FC, useEffect } from \"react\";\nimport styles from \"./styles.module.scss\";\nimport { COLORS } from \"~/contstants/colors\";\n\ninterface IProps {\n  onDragStart: (colorIndex: number) => void;\n}\n\nconst Picker: FC<IProps> = ({ onDragStart }) => {\n  return (\n    <div className={styles.picker}>\n      {COLORS.map((color, i) => (\n        <div\n          className={styles.color}\n          style={{ backgroundColor: color }}\n          onMouseDown={() => onDragStart(i)}\n          key={color}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport { Picker };\n","import React, { FC, useEffect, useCallback, useRef } from \"react\";\nimport styles from \"./styles.module.scss\";\n\ninterface IProps {\n  dragging: boolean;\n  color: string;\n}\n\nconst Cursor: FC<IProps> = ({ dragging, color }) => {\n  const cursor = useRef<HTMLDivElement>(null);\n  const onDrag = useCallback(\n    (event: MouseEvent) => {\n      const { pageX, pageY } = event;\n      if (cursor.current) {\n        cursor.current.style.transform = `translate(${pageX}px, ${pageY}px)`;\n      }\n    },\n    [cursor]\n  );\n\n  useEffect(() => {\n    if (!dragging) {\n      if (cursor.current) {\n        cursor.current.style.transform = `translate(${-40}px, ${-40}px)`;\n      }\n      return;\n    }\n\n    window.addEventListener(\"mousemove\", onDrag);\n\n    return () => window.removeEventListener(\"mousemove\", onDrag);\n  }, [dragging, onDrag]);\n\n  return (\n    <div\n      className={styles.cursor}\n      style={{ backgroundColor: color, display: dragging ? \"block\" : \"none\" }}\n      ref={cursor}\n    />\n  );\n};\n\nexport { Cursor };\n","import React, { FC, useCallback, useState, useEffect } from \"react\";\nimport styles from \"./styles.module.scss\";\nimport { Grid } from \"../Grid\";\nimport { Picker } from \"../Picker\";\nimport { COLORS } from \"~/contstants/colors\";\nimport { Cursor } from \"../Cursor\";\n\ntype Props = {};\n\nconst WIDTH = 4;\nconst HEIGHT = 4;\nconst INITIAL_CELLS = [...new Array(WIDTH * HEIGHT)].fill(\"#ffffff\");\n\nconst App: FC<Props> = ({}) => {\n  const [cells, setCells] = useState(INITIAL_CELLS);\n  const [dragging, setDragging] = useState(false);\n  const [currentColor, setCurrentColor] = useState(COLORS[0]);\n\n  const onDragStart = useCallback(\n    (index: number) => {\n      setDragging(true);\n      setCurrentColor(COLORS[index]);\n    },\n    [setCurrentColor]\n  );\n\n  const onDragStop = useCallback(() => {\n    setDragging(false);\n  }, [setDragging]);\n\n  const onCellFill = useCallback(\n    (index, color) => {\n      setCells(cells.map((el, i) => (i === index ? color : el)));\n    },\n    [cells, setCells]\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"mouseup\", onDragStop);\n    return () => window.removeEventListener(\"mouseup\", onDragStop);\n  }, [dragging, onDragStop]);\n\n  return (\n    <div className={styles.app}>\n      <Picker onDragStart={onDragStart} />\n\n      <Grid\n        width={WIDTH}\n        height={HEIGHT}\n        cells={cells}\n        dragging={dragging}\n        currentColor={currentColor}\n        onCellFill={onCellFill}\n      />\n\n      <Cursor dragging={dragging} color={currentColor} />\n    </div>\n  );\n};\n\nexport { App };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./containers/App\";\nimport \"~/styles/global.scss\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}